# -*- coding: utf-8 -*-
"""ClassificationNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1V7Hd_AJEzRFMMbyAiCFROKF595fO04nX
"""

import tensorflow as tf

# Load the data
from sklearn.datasets import load_breast_cancer
data = load_breast_cancer()

#Data Splitting
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(data.data, data.target, test_size=0.3)

numOfInstances, numOfFeatures = X_train.shape

#Normalizing
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Define the model
model = tf.keras.models.Sequential()
model.add(tf.keras.layers.Dense(units=1, input_shape=[numOfFeatures], activation='sigmoid'))

model.compile(optimizer='adam',
              loss='binary_crossentropy',
              metrics=['accuracy'])

# Train the model
r = model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=100)

# Evaluate the model, prints loss and accuracy
print("Train score:", model.evaluate(X_train, y_train))
print("Test score:", model.evaluate(X_test, y_test))

# Plot the loss
import matplotlib.pyplot as plt
plt.plot(r.history['loss'], label='loss')
plt.plot(r.history['val_loss'], label='val_loss')
plt.legend()
plt.show()

# Plot the accuracy 
plt.plot(r.history['accuracy'], label='acc')
plt.plot(r.history['val_accuracy'], label='val_acc')
plt.legend()
plt.show()

# Make predictions
y_pred = model.predict(X_test)
print(y_pred) # they are outputs of the sigmoid, interpreted as probabilities p(y = 1 | x)

# Round to get the actual predictions
# Note: has to be flattened since the targets are size (N,) while the predictions are size (N,1)
import numpy as np
y_pred = np.round(y_pred).flatten()
print(y_pred)

# Calculate the accuracy, compare it to evaluate() output
print("Manually calculated accuracy:", np.mean(y_pred == y_test))
print("Evaluate output:", model.evaluate(X_test, y_test))

model.save('ClassificationNN.h5')

# Let's load the model and confirm that it still works
# Note: there is a bug in Keras where load/save only works if you DON'T use the Input() layer explicitly
# So, make sure you define the model with ONLY Dense(1, input_shape=(D,))
# At least, until the bug is fixed
# https://github.com/keras-team/keras/issues/10417
model = tf.keras.models.load_model('ClassificationNN.h5')
print(model.layers)
model.evaluate(X_test, y_test)